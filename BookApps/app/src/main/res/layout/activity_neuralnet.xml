<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:background="#e8ebff"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context="com.example.celltron.bookapps.Neuralnet">


    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_centerHorizontal="true"
        android:layout_alignParentBottom="true">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical" >

            <TextView
                android:id="@+id/tv1"
                android:textSize="15dp"
                android:textColor="@color/colorPrimaryDark"
                android:text="\n নিউরাল নেটওয়ার্ক কি? \n
\n \t \t কম্পিউটারকে মানুষের ব্রেইনের মতো তৈরি করতে চাইলে সাধারন আইডিয়া অনুসারে একে ব্রেইনের হুবহু বিল্ড করা প্রয়োজনীয় হবে।
অর্থাৎ এর মধ্যে অসংখ্য পরিমানে ব্রেইন সেল লাগাতে হবে যা পরস্পরের সাথে সম্পর্ক যুক্ত থাকবে—যাতে সেই কম্পিউটার দিয়ে প্যাটার্ন চেনানো যায়,কোন কিছু শেখা যায় এবং মানুষের মতো কোন বিষয়ের উপর সিধান্ত গ্রহন করতে পারে। নিউরাল নেটওয়ার্ক এর সবচাইতে মজার ব্যাপার হবে,এতে কম্পিউটারকে কোন কাজ করানোর জন্য প্রোগ্রাম তৈরি করতে হবে না,সে আপনাআপনি কাজ শিখে নেবে, ঠিক আমাদের মতো।
কিন্তু সত্যি কথা বলতে, মানুষের ব্রেইনের হুবহু কোন কম্পিউটার ডিজাইন করা সম্ভব নয়, তাই হার্ডওয়্যার নয়, বরং সফটওয়্যার ব্যবহার করে সাধারন ট্র্যানজিস্টর লাগানো কম্পিউটারকে—বিলিয়ন ব্রেইন সেল লাগানো কম্পিউটারের মতো আচরন করানোর চেষ্টা করা হয়। আমরা বর্তমানে যে কম্পিউটিং করি এবং যে প্রোগ্রাম ব্যবহার করে কাজ করি, এর আউটপুট শুধু আমাদের কাছেই মূল্য রাখে, কম্পিউটারের কাছে নয়। কম্পিউটার কখনোই জানেনা, আপনি তার সাথে কি করছেন। আপনি যে টাস্কই কম্পিউটারকে সম্পূর্ণ করতে দিন না কেন—কম্পিউটার সেগুলোকে ক্যালকুলেসন করবে, বাইনারিতে পরিবর্তন করবে, সংখ্যা গুলোকে প্রসেসিং করে বিভিন্ন প্যাটার্নে সাজাবে এবং আপনি আউটপুট দেখতে পাবেন। যেমন ধরুন ডাটা স্টোরেজের কথা, আপনি এতে মিউজিক, ভিডিও, ফটোস, আর জানি কতো কি সংরক্ষিত করে রাখেন। আপনার কাছে প্রত্যেকটি ডাটার আলাদা আলাদা মতলব রয়েছে, কিন্তু আপনার ফোন বা যেকোনো কম্পিউটিং ডিভাইজের কাছে আপনার মিউজিক, ফটো, ভিডিও গুলো ওয়ান এবং জিরো ছাড়া আর কিছুই না।

তো মূলত নিউরাল নেটওয়ার্ক হলো এমন একটি কম্পিউটিং ব্যবস্থা যা মানুষের মতো প্রত্যেকটি জিনিষ বুঝতে পারবে, তা থেকে শিক্ষা গ্রহন করতে পারবে এবং ধীরেধীরে কোন ভুলত্রুটিকে শুধরিয়ে নেবে। কম্পিউটার কোন কুকুরের ফটোকে জাস্ট কোন ডাটা (1/0) হিসেবে না দেখে মানুষের মতো কুকুরের ফটো হিসেবেই দেখবে—আর এটাই হচ্ছে নিউরাল নেটওয়ার্ক। আর যেহেতু নিউরাল নেটওয়ার্কে সফটওয়্যার দ্বারা পরিচালিত করা হয়, ব্যস্তবিক ব্রেইনের মতো ডিভাইজ করা হয় না তাই এই সম্পূর্ণ প্রসেসটিকে আমরা আর্টিফিশিয়াল নিউরাল নেটওয়ার্কস বা এএনএনএস (ANNs) বলবো। এটি মানুষের ব্রেইনের মতো কাজ করলেও, এটি কিন্তু ব্রেইন নয়। \n
\n
  নিউরাল নেটওয়ার্ক কিভাবে কাজ করে? \n
\n\t \t দেখুন এর কাজ করার পদ্ধতি বা এর অভ্যন্তরে ঘটা ব্যাপার গুলো বোঝা একটু মুশকিলের, এতে এমন অনেক টার্ম চলে আসবে যেগুলো নিয়ে আবার আলাদা আলোচনা করার প্রয়োজন পড়বে। তাই বেশি টেকনিক্যাল দিকে না দিয়ে সহজ ভাষায় এবং পর্যাপ্ত উদাহরনের মাধ্যমে সম্পূর্ণ বিষয়টিকে বোঝার চেষ্টা করবো।

একটি আদর্শ নিউরাল নেটওয়ার্কে হাজার থেকে লাখো আর্টিফিশিয়াল নিউরন থাকতে পারে, এদের ইউনিট (Units) বলা। এই ইউনিট গুলোকে একে অপরের সাথে ক্রমনুসারে সাজানো থাকে এবং প্রত্যেকে একে অপরের সাথে কানেক্টেড থাকে ঠিক কোন নেটওয়ার্কের মতো। এদের মধ্যে কিছু ইউনিট রয়েছে যারা বিভিন্ন ধরনের তথ্য গ্রহন করে, যেমন আমরা কোন বস্তুকে দেখি, রঙ চেনার চেষ্টা করি, আঁকার বুঝি ইত্যাদি—এই ইউনিট গুলোকে ইনপুট ইউনিট বলা হয়। এই ইউনিট গুলো নিউরাল নেটওয়ার্ক কে চিনতে, জানতে বা প্রসেস করাতে সাহায্য করে। নেটওয়ার্কের আরেক পাশে রয়েছে আউটপুট ইউনিট—যা কম্পিউটারটি ব্যস্তবিক জিনিষ থেকে ঠিক কি জ্ঞান লাভ করলো তার বহির প্রকাশ করে। এতেই কিন্তু শেষ নয়, এই ইনপুট ইউনিট এবং আউটপুট ইউনিটের মাঝামাঝি পর্যায়ে থাকে হিডেন ইউনিট, যা নেটওয়ার্কটির অধিকাংশ আর্টিফিশিয়াল নিউরন দ্বারা গঠিত। তো দেখা গেলো, এতে তিন ধরনের ইউনিট থাকে, এদের গ্রুপকে লেয়ার বলা হয়। প্রত্যেকটি লেয়ারের ইউনিট গুলো প্রত্যেকটি ইউনিটের সাথে পরস্পর সম্পৃক্ত থাকে এবং একে অপরের কাছ থেকে তথ্য প্রসেসিং করিয়ে তবেই সর্বশেষ রেজাল্ট বা আউটপুট প্রদান করে। প্রত্যেকটি ইউনিটের একে অপরের সাথের কানেকশনকে একটি নাম্বার দ্বারা অঙ্কিত করানো হয়—একে ওয়েট (Weight) বলে। যদি একটি ইউনিট আরেকটি ইউনিটের তথ্যের সাথে সম্মতি প্রদান করে তবে ওয়েট পজিটিভ হয় আর সম্মতি নাকজ করে দিলে ওয়েট নেগেটিভ হয়।
\n
\n হিউম্যান লার্নিং  \n
\n
\t \t এখন আসি এটি কাজ করে কিভাবে তার প্রসঙ্গে, নিউরাল নেটওয়ার্কে দুই পদ্ধতি যেকোনো ডাটা প্রবাহিত হয়। যখন কম্পিউটারটি কোন কিছু বিষয়ে শিক্ষা গ্রহন করে তখন এক ধরনের ডাটা প্রবাহিত হয় এবং শিক্ষা গ্রহন করার পরে, কম্পিউটারটি যখন অ্যাকশনে নেমে পরে তখন এক ধরনের ডাটা প্রবাহিত হয়। যখন কম্পিউটারটি কোন শিক্ষা গ্রহন করতে থাকে তখন তার শেখাকে ঠিক করতে বারবার ফিডব্যাকের প্রয়োজন পড়ে, যে সে ঠিক শিখছে না ভুল শিখছে। যেমন- টিচারের সামনে আপনি কোন বানানকে ভুল লিখলে তিনি তা শুধরিয়ে দেন, এবং আমাদেরও কিছু শেখার জন্য সবসময় ফিডব্যাকের প্রয়োজন পড়ে। মনেকরুন আপনি এয়ারগান দিয়ে বেলুন সুট করছেন। আপনি বেলুনের দিকে বন্দুকটি তাক করে সুট করলেন, কিন্তু গুলিটি একটি উপরদিয়ে চলে গেলো। এখন দ্বিতীয়বার যখন আপনি সুট করবেন তখন নিশ্চয় আগের বারের পজিশন এবং টার্গেটিং এর কথা মাথায় রাখবেন। এবার নিশ্চয় বন্দুকটি একটি নিচু করে সুট করবেন, কেনোনা আপনার মস্তিষ্ক জানে, সে আগের বারে উঁচু করে সুট করে লাগাতে পারেনি। এভাবে চেষ্টা করতে করতে বা ভুল শোধরাতে শোধরাতে আপনি সঠিক নিশানা তৈরি করতে পারবেন।

নিউরাল নেটওয়ার্কও ঠিক এমনিভাবে কোন শিক্ষা গ্রহন করে। প্রত্যেকবারে এটি ইনপুট ইউনিট থেকে তথ্য গ্রহন করে। ধরুন ইনপুট থেকে কম্পিউটারকে একটি বেড়ালের ফটো দেখানো হলো। এটি এই তথ্যগুলোকে অর্থাৎ এটি দেখতে কেমন, কি আকারের হয়ে থাকে, কোথায় চোখ আছে, কোথায় মুখ আছে ইত্যাদি তথ্য সংরক্ষিত রাখে। এখন প্রত্যেকটি বিড়াল তো আর এক রকমের হয়না, তাই নেটওয়ার্ক কে শিক্ষা দেবার জন্য অনেক বিড়ালের ফটো দেখানো প্রয়োজন পড়ে। এখন যদি আরেকটি ফটো দেখিয়ে কম্পিউটারকে বলা হয়, এটি বিড়াল না কুকুর। তবে প্রথমে এটির তথ্য ইনপুট ইউনিট গ্রহন করবে এবং তা হিডেন ইউনিটের কাছে পাঠিয়ে দেবে। হিডেন ইউনিটের কাছে আগের বিড়ালের ফটো থেকে অনেক তথ্য রয়েছে, তাই এটি ইনপুটকে বিশ্লেষণ করতে আরম্ভ করবে। ধরুন একটি ইউনিট এর নাকের আঁকার, ধরণ, রঙ ইত্যাদি পর্যবেক্ষণ করবে যদি সেটি বিড়ালের সাথে মিলে যায় তবে সে পজিটিভ ওয়েট প্রদান করবে, আরেকটি ইউনিট হয়তো চোখ পর্যবেক্ষণ করবে আরেকটি হয়তো লেজ পর্যবেক্ষণ করবে। তো এই হিডেন ইউনিটের প্রসেসিং এবং ওয়েটের পজিটিভ বা নেগেটিভ রেজাল্টের উপর ভিত্তি করে আউটপুট প্রদান করবে। যদি আউটপুট ভুল আসে তবে কম্পিউটিং সিস্টেমটিকে জানাতে হবে যে সে ভুল রেজাল্ট দিয়েছে, পরবর্তীতে কম্পিউটিং সিস্টেমটি আর সেই ভুলটি করবে না। ঠিক যেমন আমরা ভুল থেকে শিক্ষা গ্রহন করি।

এখন মনেকরুন আপনি নিউরাল নেটওয়ার্ক কে কিছু চেয়ার এবং টেবিলের ছবি দেখিয়ে শিক্ষা দিয়েছেন। কিন্তু এবার সম্পূর্ণ নতুন কিছু মডেলের চেয়ার টেবিলের ছবি তার সামনে তুলে ধরলেন, যা আগে কখনো দেখানো হয় নি। এবার কম্পিউটিং সিস্টেমটি আগের দেখানো চেয়ার টেবিল গুলো থেকে ধারণা নেবে (যেমন মানুষ করে থাকে) এবং নতুন চেয়ার টেবিল গুলোকে আলাদা ভাবে ক্যাটাগরিতে বিভক্ত করবে। তবে আপনি কি ধরনের শিক্ষা দিয়েছেন সেটিও গুরুত্বপূর্ণ বিষয়। আপনার পূর্বের শিক্ষার সাথে তাল মিলিয়েই এটি কাজ করবে এবং প্রত্যেকবারই নতুন কিছু শিখবে।

এখন কোন মানুষকে বলা হলো, “তাহমিদ, তোমার সামনের চেয়ার টেবিল গুলোর দিকে দেখো”। এভাবে কিন্তু কোন কম্পিউটারকে বলা যাবে না, কম্পিউটারের ইনপুট অবশ্যই বাইনারিতে হতে হবে—কারন এটি যতোই মানুষের মতো কাজ করার চেষ্টা করুক না কেন, এটি মানুষ নয়। আমরা জানি, কম্পিউটারের প্রত্যেকটি ইনপুট গ্রহন করার জন্য সুইচ অন বা অফ হয় (ট্র্যানজিস্টর অন/অফ)। নিউরাল নেটওয়ার্ক আপনাকে উত্তর শুধু নেগেটিভ বা পজিটিভ ভাবে প্রদান করবে। মনেকরুন আপনি টেবিল চেয়ারের ছবি দেখিয়ে ইনপুট করলেন, ১) এটার কি পেছনের হেলান দেওয়ার জায়গা আছে? ২) এর কি উপরিতল আছে? ৩) এতে কি নরম গদি লাগানো রয়েছে? ৪) এখানে কি দীর্ঘ সময়ের জন্য আরামে বসা যাবে? ৫) এর উপর কি অনেক জিনিষ পত্র রাখা যাবে? এখন কম্পিউটার “টেবিলের ক্ষেত্রে” আপনাকে জবাব দেবে, হ্যাঁ, না, হ্যাঁ, হ্যাঁ, না বা বাইনারিতে উত্তরটি হবে 10110 এবং টেবিলের ক্ষেত্রে উত্তর দেবে না, হ্যাঁ, না, না, হ্যাঁ বা বাইনারিতে 01001। অর্থাৎ শেখার সময় এটি টেবিলকে 01001 হিসেবে দেখতে পাবে এবং চেয়ারকে 10110 হিসেবে দেখতে পাবে, এবং এটি চেয়ার না টেবিল সেটিও বুঝতে পারবে।\n
"
                android:layout_width="match_parent"
                android:layout_height="match_parent" />







            </LinearLayout>
    </ScrollView>
</RelativeLayout>
